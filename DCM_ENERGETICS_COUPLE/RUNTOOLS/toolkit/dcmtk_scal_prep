#!/bin/bash
# This tool is part of the process for setting up a scalability experiment.
# class = @Scalability experiment tools@


usage()  {
   echo
   echo "USAGE : $(basename $0 ) [-h] [-l layout_file] [-m minproc] [-M maxproc] [-s proc_step]"
   echo
   echo "  PURPOSE:"
   echo "     This tool is part of the process for setting up a scalability experiment."
   echo "     It assumes that you have already run the MPP_PREP tool for defining all the"
   echo "     file, narrowing the results to a specific range of cores. In addition, it will"
   echo "     call a python script that produces a job file to be submitted for all the "
   echo "     decomposition to test. At this point, the python tools assumes that the target"
   echo "     machine is occigen (SLURM batch system). Hence, the job file may require some"
   echo "     editing (batch header part) to fit your HPC system."
   echo "     Due to the interaction with MPP_PREP it is likely a good choice to run this tool"
   echo "     where you have the MPP_PREP results, in particular with the screen.sh script."
   echo
   echo "  OPTIONS:"
   echo "     -h : Display this help message."
   echo "     -l layout_file : Pass the name of the layout file produced by MPP_PREP  procedure."
   echo "           Default is $cf_layout"
   echo "     -m minproc : Gives the minimum number of core you want to test. Default=$minproc "
   echo "     -M maxproc : Gives the maximum number of core you want to test. Default=$maxproc"
   echo "     -s proc_step : Gives the core step for scaning the core range.  Default=$stpproc"
   echo 
   exit
         }

#set -x

# default values : 
 cf_layout='processor.layout'
 minproc=50
 maxproc=600
 stpproc=50

while getopts :hl:m:M:s: opt ; do
   case $opt in
     (h) usage ;;
     (l) cf_layout=${OPTARG} ;;
     (m) minproc=${OPTARG} ;;
     (M) maxproc=${OPTARG} ;;
     (s) stpproc=${OPTARG} ;;
     (*) usage ;;
   esac
done

rm  -f log_*
for n in $(seq $minproc $stpproc $maxproc)  ; do 
   nn=$(printf "%05d" $n)
   # look for the best decomposition in 20 core window around target value
   for m in $(seq $(( n -10)) $((n + 10)) ) ; do 
      ./screen.sh -f $cf_layout $m | grep -v sup | grep -v layout | sort -k8nr | tail -20 >> log_$nn
   done
   cat log_$nn |  sort -k8n | head -2 > ztmp ; mv ztmp log_$nn
done

python $RUNTOOLS/toolkit/dcmtk_scal_mkrunnemo.py  -n run_nemo.scal.sh -c 40 -x 80 -X 80

