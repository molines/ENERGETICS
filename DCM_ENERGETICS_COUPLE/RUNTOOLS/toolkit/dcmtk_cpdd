#!/bin/bash

# This script is used to copy files from /scratch to /data.
# it must be used in specific directories, either
# CONFIG-CASE-S/yyyy , CONFIG-CASE-MEAN/yyyy or CONFIG-CASE-R.
# It create the equivalent directory on $SDIR
# class = @File management tools@

# Function definitions
#----------------------
# Usage manual
usage() {
     echo
     echo "USAGE: $(basename $0) [-h] "
     echo 
     echo "  PURPOSE:"
     echo "     This script is used to copy files from either a -S, -MEAN or -R "
     echo "     directory, located on $DDIR to $SDIR (mirroring)."
     echo "     For -S and -MEAN, it must be used in a 'year' subdirectory. "
     echo "     The same directory will be copied on $SDIR. " 
     echo "     If files already exist, they are just skipped."
     echo "     Note that depending on the archiving system, mirroring is not"
     echo "     necessarily the best choice as it does'nt reduce the number of"
     echo "     used inodes on $SDIR file system."
     echo "   "
     echo "  ARGUMENTS:"
     echo "     This script is used without any arguments, CONFIG and CASE are deduced"
     echo "     from the directory name.  mcp script (multiple cp) uses this script "
     echo "     (and its symetrical ddcp).  Look at mcp -h for more details "
     echo
     echo "  OPTIONS:"
     echo "      -h : Display this help page "
     echo
     exit 0
        }

# fastcp take 2 args .1 file name (local and remote)  2: remote directory.
fastcp() {
case $machine in
  ( irene | occigen) 
    if [ ! -f $2/$1 ] ; then
     dd bs=1024k if=$1 of=$2/$1
    fi ;;
  (adapp )
    if [ ! -f $2/$1 ] ; then
     mfput $1 $2/$1
    fi ;;
  (ada )
     tmp=$(rsh ergon " if [ ! -f $2/$1 ] ; then echo missing  ; else echo here ;  fi ")
     if  [ $tmp = missing ] ; then
       mfput $1 $2/$1
     fi
      ;;
esac
         }
# check existence of directory and create it if missing
chkdir() { 
 case $machine in 
 (  irene | occigen )
    mkdir -p $1 ;;
 (ada | adapp) 
    rsh ergon " mkdir -p $1 " ;;
 ( * )
  echo machine $machine not supported ; exit 1 ;;
 esac 
         }
#--------------------------------------------------------------------------
# check the positioning of environment variables
#-----------------------------------------------
if [ ! $SDIR ] ; then
  echo Environment variable SDIR must be set to the root of the storage machine
  exit 0
fi

if [ ! $DDDIR ] ; then
  if [ ! $CDIR ] ; then
    echo Environment variable CDIR and/or DDIR  must be set !
    exit 0
  else
    DDIR=${DDIR:-$CDIR}
  fi
fi

# command line parser
#--------------------
while getopts :h opt ; do
  case $opt in 
    (h) usage ;;
    (*) usage ;;
   esac
done

# machine determination
#-----------------------
machine=occigen
hostname | grep occigen > /dev/null
if [ $? == 0 ]                 ; then machine=occigen ; fi
if [ $(hostname) == ada336   ] ; then machine=adapp ; fi
if [ $(hostname) == ada337   ] ; then machine=ada   ; fi
if [ $(hostname) == irene190 ] ; then machine=irene ; fi


# Determine the type of directory we are in ( R, S MEAN, S/xx MEAN/xx ...)
#------------------------------------------
here=$(pwd)         
suffix=${here##*-}

# how many '/' in suffix ?
nslash=$(echo ${suffix} | awk -F/ '{print NF-1}')

# determine in which kind of tree we are.
tmp=${suffix:0:1}

case $tmp in
  ('R') zdir='R' ;;       #                   CONFCASE-R
  ('S') zdir='S' 
      if [ $nslash = 1 ] ; then 
         zdir='Smain'     # no subdir         CONFCASE-S/year
      elif [ $nslash = 2 ] ; then 
         zdir='Ssub'      # subdirs 1 level  : CONFCASE-S/xxx/year
      else
         zdir='UNKNOWN'   # do not understand where we are
      fi ;;
  ('M') 
    tmp2=${suffix:0:4}
    if [ $tmp2 = 'MEAN' ] ; then 
      if [ $nslash = 1 ] ; then 
         zdir='Mmain'     # no subdir            CONFCASE-MEAN/year
      elif [ $nslash = 2 ] ; then 
         zdir='Msub'      # subdirs 1 level      CONFCASE-MEAN/xxx/year
      else
         zdir='UNKNOWN'   # do not understand where we are
      fi 
    else
        zdir='UNKNOWN'    # not a MEAN but a Mxxx ???
    fi ;;
esac

# exit if not able to determine where we are !
#--------------------------------------------
if [ $zdir = 'UNKNOWN' ] ; then
  echo Sorry, but cpdd must be exclusively used in CONFCASE-S/yyyy or CONFCASE-MEAN/yyyy or CONFCASE-R directories
  exit 1
else
  echo Working for $zdir
fi

# Copy files to SDIR according to the guess setting
#----------------------------------------------------
case $zdir in
( 'R' ) 
  echo working for restart files
  DIR=$( basename $here ) ; CONFCASE=${DIR%-R}
  CONFIG=$( echo $CONFCASE | awk -F- '{print $1}')
  CASE=$( echo $CONFCASE | awk -F- '{print $2}' )
  DATADIR=$SDIR/$CONFIG/$DIR
  echo CONFIG = $CONFIG
  echo CASE = $CASE
  echo CONFCASE = $CONFCASE
  echo $DATADIR
  for f in *v2* restart.obc.* ; do
    fastcp $f $DATADIR 
  done 
  exit ;;  # no more thins to do !

('Smain' | 'Mmain')
  year=$( basename $here)
  tmp=$( dirname $here )
  DIR=$( basename $tmp )
  CASE=${DIR#*-} ; CASE=${CASE%-*}
  CONFIG=${DIR%%-*}
  CONFCASE=${CONFIG}-${CASE}

  echo CONFIG = $CONFIG
  echo CASE = $CASE
  echo CONFCASE = $CONFCASE
  echo YEAR = $year
  echo DIR = $DIR
  DATADIR=$SDIR/$CONFIG/$DIR/$year 
  rootdir=../ ;;

('Ssub' | 'Msub' ) 
  year=$( basename $here)
  subdir=$( basename $(dirname $here) )             # just the name of the subdir 
  tmp=$( dirname $here ) ; tmp2=$( dirname $tmp )  # 2 level to retrieve confcase
  DIR=$( basename $tmp2 )
  CASE=${DIR#*-} ; CASE=${CASE%-*}
  CONFIG=${DIR%%-*}
  CONFCASE=${CONFIG}-${CASE}

  echo CONFIG = $CONFIG
  echo CASE = $CASE
  echo CONFCASE = $CONFCASE
  echo YEAR = $year
  echo DIR = $DIR
  DATADIR=$SDIR/$CONFIG/$DIR/$subdir/$year 
  rootdir=../../ ;;
esac

  chkdir  $DATADIR

  for f in *.nc ; do
   fastcp  $f $DATADIR
  done

#  if [ $(dirname $suffix) = 'S' ] ; then
  if [ ${zdir:0:1} = 'S' ] ; then
  # in this case also move ocean.output and namelist that might be in ../
    cd $rootdir
    chkdir $SDIR/$CONFIG/$DIR/ANNEX
    for f in nameli* ocean* sol* timing.output.* layout.dat ; do
       if [ ! -f $SDIR/$CONFIG/$DIR/ANNEX/$f ] ; then fastcp $f $SDIR/$CONFIG/$DIR/ANNEX/ ; fi
    done
  fi
