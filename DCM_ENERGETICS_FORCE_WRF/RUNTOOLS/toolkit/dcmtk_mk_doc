#!/bin/bash
# Automatically produce the dcm toolkit manual from the usage message of each tools
# The result is on a markdown file.
# class = @Miscellaneous tools@

usage()  {
   echo
   echo "USAGE: $(basename $0) [-h] -o OUT-md_file "
   echo
   echo "   PURPOSE:"
   echo "      Scan the dcmtk_* scripts and sort then regarding the class it belongs to."
   echo "      Then output the usage message and build a md file."
   echo 
   echo "   ARGUMENTS:"
   echo "      -o OUT-md_file: Specify the output markdown file."
   echo
   echo "   OPTIONS:"
   echo "      -h : Display this help message."
   echo
   exit 0
          }

mdfile='none'
while getopts :ho: opt ; do
   case $opt in
     (h) usage ;;
     (o) mdfile=${OPTARG} ;;
     (*) usage ;;
   esac
done

if [ $mdfile = 'none' ] ; then
   usage
fi

cd $RUNTOOLS/toolkit
# look for classes
oIFS=$IFS ; IFS=$'\n'
IFS=','
classes=( $(grep class dcmtk_* | grep '@' | grep -v '~' | grep -v grep | sort -k4,4 -k1,1 | awk -F@ '{printf "%s,\n", $2  }' | sort -u) )
IFS=$'\n'

nclass=${#classes[@]}
rm -f $mdfile
# write header and Forewords

cat << eof > $mdfile
# DCM toolkit
## Forewords
  After many years of run production, many 'small' scripts or programs were 
developped in order to help the run production. Even if 'small' they appear 
to be quite usefull ! We collect them into DCM toolkit for sharing and easier 
maintenance. In the following, a brief description of the toolkit is given, 
with an intent of classification by category. All scripts belonging to DCM toolkit
have a name starting with dcmtk_ . They are located in RUNTOOLS/toolkit directory.
Before use, there are some f90 programs to be compiled and installed in toolkit/src/.
(A Makefile is provided and no particular library is needed). \`make install\` copy the
binaries in RUNTOOLS/bin which is in the PATH, when using DCM.

  All dcmtk tools have the \`-h \`option to display usage instructions. The document
that you are actually readind was created with \`dcmtk_mk_doc -o HOMEDCM/../DOC/dcm_toolkit.md\`
eof

for i in $(seq 0 $(( nclass -2 )) ) ; do
   IFS=$'\n'
   echo  "##" ${classes[$i]} >> $mdfile
#  IFS=','
   cmd="grep -e '$( echo ${classes[$i]} )' dcmtk_*"
   tools=$(eval $cmd | awk -F: '{print $1}' )
   for tool in $tools ; do
     echo "### ["$tool"](../RUNTOOLS/toolkit/"$tool")" >> $mdfile
     echo '  ```' >> $mdfile
     if [ ${tool#*.} = 'py' ] ; then
        python ./$tool -h >> $mdfile
     else
       ./$tool -h >> $mdfile
     fi
     echo '  ```' >> $mdfile

   done
done

   
